#!/bin/sh
# shellcheck shell=dash
#
# This script is an entry point for a standalone installer.
# It is expected to probe for the destination installation
# media and arrange for source files to be in /parts. Some
# of these files will be supplied from outside of the container
# in /bits, some will be constructed on the fly depending
# on settings that were passed via kernel command line:
#   eve_blackbox
#   eve_nuke_disks
#   eve_nuke_all_disks
#   eve_install_disk
#   eve_persist_disk
#   eve_install_server
#   eve_pause_before_install
#   eve_pause_after_install
#   eve_reboot_after_install
#   eve_install_skip_config
#   eve_install_skip_persist
#   eve_install_skip_rootfs
#   eve_install_skip_zfs_checks
#
BAIL_FINAL_CMD=${BAIL_FINAL_CMD:-"exit 1"}
[ -n "$DEBUG" ] && set -x

pause() {
   echo "Pausing before $1. Entering shell. Type 'exit' to proceed to $1"
   sh
}

bail() {
   if mount_part INVENTORY "$(root_dev)" /run/INVENTORY -t vfat -o iocharset=iso8859-1; then
      collect_black_box /run/INVENTORY 2>/dev/null
   fi
   echo "$*"
   $BAIL_FINAL_CMD
}

trunc() {
  rm "$1"
  touch "$1"
}

mounted_dev() {
   local STAT
   STAT=$(stat -c '%d' "$1" )
   # shellcheck disable=SC2035
   DEV=$(cd /sys/block && grep -l '^'$(( STAT / 256 )):$(( STAT % 256 ))'$' */dev */*/dev 2>/dev/null | sed -ne 's#\([^/]*\)/dev#\1#p')
   [ -e "/dev/$DEV" ] || DEV=null
   echo "$DEV"
}

root_dev() {
   local MAJOR
   local MINOR
   local DEV
   if [ -L /dev/root ] ; then
      DEV=$(readlink -f /dev/root)
      MAJOR=$(( 0x$(stat -c '%t' "$DEV") + 0 ))
      MINOR=$(( 0x$(stat -c '%T' "$DEV") + 0 ))
   else
      MAJOR=$(( $(stat -c '%d' /bits ) / 256))
      MINOR=$(( $(stat -c '%d' /bits ) - MAJOR * 256 ))
   fi
   DEV_MM="$MAJOR:$MINOR"
   # shellcheck disable=SC2035
   (cd /sys/block && grep -l '^'$DEV_MM'$' */dev */*/dev 2>/dev/null || echo null/) | cut -f1 -d/
}

# find_part LABEL BLOCK_DEV
# BLOCK_DEV is expected to be devicename only (ie sda not /dev/sda)
find_part() {
   local LABEL="$1"
   local BLOCK_DEV="$2"
   PARTS=$(lsblk -anl -o "NAME,PARTLABEL" /dev/"$BLOCK_DEV" 2>/dev/null | sed -ne "/$LABEL"'$/s#'"[[:space:]]*$LABEL##p")
   for p in $PARTS ; do
      [ -f "/sys/block/$BLOCK_DEV/$p/dev" ] && echo "$p" && exit 0
   done
}

# mount_part PART_NAME DISK TARGET [mount opts]
mount_part() {
   local PART="$1"
   local DISK="$2"
   local TARGET="$3"
   local ID
   shift 3

   ID="$(find_part "$PART" "$DISK")"
   [ -z "$ID" ] && return 1

   mkdir -p "$TARGET"
   mount "$@" "/dev/$ID" "$TARGET"
}

# run command in a chroot with system mount points provisioned
ctr_run() {
   local SYS_DIRS="/sys /proc /dev"
   local DIR="$1"
   shift
   for d in $SYS_DIRS; do mount --bind "$d" "$DIR/$d"; done
   chroot "$DIR" "$@"
   for d in $SYS_DIRS; do umount "$DIR/$d"; done
}

# run binary from pillar
pillar_run() {
  binary="$1"
  shift
  LD_LIBRARY_PATH=/opt/pillar/lib:/opt/pillar/usr/lib /opt/pillar/opt/zededa/bin/"$binary" "$@"
}

# collect_black_box FOLDER_TO_PUT_BLACK_BOX
collect_black_box() {
   lsblk > "$1/lsblk.txt"
   dmesg > "$1/dmesg.txt"
   tar -C /proc -cjf "$1/procfs.tar.bz2" cpuinfo meminfo
   tar -C /sys -cjf "$1/sysfs.tar.bz2" .
   tar -C /config -cjf "$1/config.tar.bz2" .
   tar -C /run/P3 -cjf "$1/persist.tar.bz2" status newlog log config checkpoint certs agentdebug
   pillar_run tpmmgr saveTpmInfo "$1"/tpminfo.txt
}

# prepare_mounts_and_zfs_pool POOL_CREATION_COMMAND_SUFFIX_SUFFIX
prepare_mounts_and_zfs_pool() {
  [ -e /root/sys ] || mkdir /root/sys && mount -t sysfs sysfs /root/sys
  [ -e /root/proc ] || mkdir /root/proc && mount -t proc proc /root/proc
  [ -e /root/dev ] || mkdir /root/dev && mount -t devtmpfs -o size=10m,nr_inodes=248418,mode=755,nosuid,noexec,relatime devtmpfs /root/dev
  [ -e /root/run ] || mkdir /root/run && mount --rbind /run /root/run
  POOL_CREATION_COMMAND="chroot /root zpool create -f -m none -o feature@encryption=enabled -O overlay=on persist $1"
  eval "$POOL_CREATION_COMMAND"
  chroot /root zfs create -o refreservation="$(chroot /root zfs get -o value -Hp available persist | awk '{ print ($1/1024/1024)/5 }')"m persist/reserved
  chroot /root zfs set mountpoint="/run/P3" persist
}

adjust_zfs_mounts_and_umount() {
  chroot /root zfs set mountpoint="/persist" persist
  chroot /root zfs create -p -o mountpoint="/persist/containerd/io.containerd.snapshotter.v1.zfs" persist/snapshots
  umount /root/sys ||:
  umount /root/proc ||:
  umount /root/dev ||:
  umount /root/run ||:
}

# do this just in case
modprobe usbhid && modprobe usbkbd

# clean partition tables on disks defined to nuke
if grep -q eve_nuke_disks /proc/cmdline; then
  NUKE_DISKS=$(</proc/cmdline tr ' ' '\012' | sed -ne '/^eve_nuke_disks=/s#^.*=##p')
  printf '%s' "Nuking partition tables on:"
  for dev in $(echo "$NUKE_DISKS" | tr ',' ' '); do
      printf ' %s' "$dev"
      dd if=/dev/zero of="/dev/$dev" bs=512 count=34 >/dev/null 2>&1
  done
  sync; sleep 5; sync
  echo " done!"
fi

# measure of last resort: we nuke all partition tables
# so that we can get to a blank state. NOTE that this
# may damage installer image itself, but we don't really
# care since that is trivial to re-create
if grep -q eve_nuke_all_disks /proc/cmdline; then
   echo -n "Nuking partition tables on:"
   for i in $(lsblk -anlb -o "TYPE,NAME,SIZE" | grep "^disk" | awk '$3 { print $2;}'); do
      echo -n " $i"
      dd if=/dev/zero of="/dev/$i" bs=512 count=34 >/dev/null 2>&1
   done
   sync; sleep 5; sync
   echo " done!"
   poweroff -f
fi

# lets see if we're told on which disk to install...
INSTALL_DEV=`cat /proc/cmdline | tr ' ' '\012' | sed -ne '/^eve_install_disk=/s#^.*=##p'`

# ...if not we will try to guess, and...
if [ -z "$INSTALL_DEV" ] ; then
   # now lets see what sources of installation material are there
   ROOT_DEV=$(root_dev)
   # we sort disks by transport, so it will be sorted with order nvme->sata->usb
   FREE_DISKS_ALL=$(lsblk -anlb -o "TYPE,NAME,SIZE,TRAN" | grep "^disk"| sort -k4 | awk '$3 { print $2;}' | grep -v "${ROOT_DEV:-$^}")
   for d in $FREE_DISKS_ALL; do
      [ -e "/sys/devices/virtual/block/$d" ] || FREE_DISKS="$FREE_DISKS $d"
   done

   # if there's more than one free disk, install on the first one but warn about all of them
   echo $FREE_DISKS | awk '{ if (NF > 1) { printf("WARNING: found multiple free disks %s, installing on the first one\n", $0); } }'
   INSTALL_DEV=$(set ${FREE_DISKS:-""} ; echo $1)
fi

# ...if we didn't find a single free disk - bail
[ -z "$INSTALL_DEV" ] && bail "FATAL: didn't find a single free disk"

# we allow for P3 partition to reside on a separate disk
INSTALL_PERSIST=$(</proc/cmdline tr ' ' '\012' | sed -ne '/^eve_persist_disk=/s#^.*=##p')
INSTALL_PERSIST=${INSTALL_PERSIST:-$INSTALL_DEV}

# now lets figure out whether we have installation material
CONFIG_PART=$(find_part CONFIG "$(root_dev)")
CONFIG_PART="${CONFIG_PART:+"/dev/"}${CONFIG_PART:-"/bits/config.img"}"
if [ -e "$CONFIG_PART" ]; then
   dd if="$CONFIG_PART" of=/parts/config.img bs=1M
else
   mkfs.vfat -v -n CONFIG -C /parts/config.img 1024
   mcopy -i /parts/config.img -s /config/* ::/
fi
# the only thing we override in /config for now is server
tr ' ' '\012' < /proc/cmdline | sed -ne '/^eve_install_server=/s#^.*=##p' > /parts/eve_install_server
[ ! -s /parts/eve_install_server ] || mcopy -i /parts/config.img -o /parts/eve_install_server ::/server

# if there's something in /bits -- that's the ultimate source
ln -s /bits/* /parts 2>/dev/null

# and now a few measures of last resort
[ -e /parts/rootfs.img ] || ln -s "/dev/$(mounted_dev /root)" /parts/rootfs.img
[ -e /parts/EFI ] || ln -s /root/EFI /parts/EFI
[ -e /parts/boot ] || ln -s /root/boot /parts/boot

# finally lets see if we were given any overrides
for i in rootfs config persist; do
   grep -q "eve_install_skip_$i" /proc/cmdline && trunc "/parts/$i.img"
done

# we may be asked to pause before install procedure
grep -q eve_pause_before_install /proc/cmdline && pause "formatting the /dev/$INSTALL_DEV"

# User may have requested to skip the zfs requirements checks.
SKIP_ZFS_CHECKS=false
grep -q eve_install_skip_zfs_checks /proc/cmdline && SKIP_ZFS_CHECKS=true

P3_ON_BOOT_PLACEHOLDER="P3_ON_BOOT_PLACEHOLDER"
POOL_CREATION_COMMAND_SUFFIX=""
DISK_WITH_P3=""
DISKS_TO_MERGE_COUNT=0
MULTIPLE_DISKS=false
INSTALL_ZFS=false
if [ "$INSTALL_DEV" != "$INSTALL_PERSIST" ]; then
   if echo "$INSTALL_PERSIST"| grep -q ","; then
     MULTIPLE_DISKS=true
     INSTALL_ZFS=true
     modprobe zfs
     MAKE_RAW_PARTS="efi imga imgb conf"
     for dev in $(echo "$INSTALL_PERSIST" | tr ',' ' '); do
        if [ "$dev" = "$INSTALL_DEV" ]; then
           # in case we want to have one of P3 on the bootable disk
           MAKE_RAW_PARTS="efi imga imgb conf persist"
           DISK_WITH_P3="$dev"
           POOL_CREATION_COMMAND_SUFFIX="$POOL_CREATION_COMMAND_SUFFIX $P3_ON_BOOT_PLACEHOLDER"
           DISKS_TO_MERGE_COUNT=$((DISKS_TO_MERGE_COUNT+1))
        else
           if [ -f "/sys/block/$dev/dev" ]; then
              PDEV="/dev/$dev"
              dd if=/dev/zero of="$PDEV" bs=512 count=1 conv=notrunc && sync
              sgdisk -Z --clear "$PDEV" 2>/dev/null || :
              POOL_CREATION_COMMAND_SUFFIX="$POOL_CREATION_COMMAND_SUFFIX $PDEV"
              DISKS_TO_MERGE_COUNT=$((DISKS_TO_MERGE_COUNT+1))
           else
              echo "WARNING: Cannot find /sys/block/$dev/dev, will skip it"
           fi
        fi
     done

     if [ "$SKIP_ZFS_CHECKS" = false ]; then
        # Do ZFS minimum requirements checks (64GB memory and 3 physical drives in INSTALL_PERSIST)
        # If requirements are not met, fallback to ext4 filesystem.
        system_memory_GB="$(/usr/bin/free -g | grep Mem | awk '{print $2}')"

        if [ "$system_memory_GB" -lt 64 ] || [ $DISKS_TO_MERGE_COUNT -lt 3 ]; then
           echo "WARNING: ZFS installation minimum requirements are not met, installing ext4 filesystem instead."
           # The following setting will install ext4 persist
           INSTALL_ZFS=false
        fi
     fi

     if [ $DISKS_TO_MERGE_COUNT -eq 0 ] || [ "$INSTALL_ZFS" = false ]; then
          # in case of only comma provided or zfs requirements are not met
          MAKE_RAW_PARTS="efi imga imgb conf persist"
          DISK_WITH_P3="$INSTALL_DEV"
          POOL_CREATION_COMMAND_SUFFIX=$P3_ON_BOOT_PLACEHOLDER
          DISKS_TO_MERGE_COUNT=1
     fi
   else
     # apparently sgdisk -Z doesn't clear MBR and keeps complaining
     PDEV="/dev/$INSTALL_PERSIST"
     dd if=/dev/zero of="$PDEV" bs=512 count=1 conv=notrunc
     sgdisk -Z --clear "$PDEV" 2>/dev/null || :
     sgdisk --new 1:2048:0 --typecode=1:5f24425a-2dfa-11e8-a270-7b663faccc2c --change-name=1:P3 "$PDEV"
     sgdisk -v "$PDEV"
     # force make-raw to skip persist
     MAKE_RAW_PARTS="efi imga imgb conf"
   fi
fi

# do the install (unless we're only here to collect the black box)
grep -q eve_blackbox /proc/cmdline || /make-raw "/dev/$INSTALL_DEV" $MAKE_RAW_PARTS || bail "Installation failed. Entering shell..."

if [ "$MULTIPLE_DISKS" = true ] && [ "$INSTALL_ZFS" = true ]; then
  if [ "$DISK_WITH_P3" != "" ]; then
    P3_ID="$(find_part P3 "$DISK_WITH_P3")"
    [ -z "$P3_ID" ] && bail "Installation failed. Cannot found P3. Entering shell..."
    POOL_CREATION_COMMAND_SUFFIX=$(echo "$POOL_CREATION_COMMAND_SUFFIX" | sed "s#$P3_ON_BOOT_PLACEHOLDER#/dev/$P3_ID#g")
    echo "WARNING: Will use /dev/$P3_ID instead of /dev/$DISK_WITH_P3 for P3 because of bootable parts needed"
  fi
  # we use mirror for 2 disks, raidz1 for 3 disks and raidz2 for more than 3 disks
  case $DISKS_TO_MERGE_COUNT in
    1) ;;
    2)
      POOL_CREATION_COMMAND_SUFFIX="mirror $POOL_CREATION_COMMAND_SUFFIX"
      ;;
    3)
      POOL_CREATION_COMMAND_SUFFIX="raidz1 $POOL_CREATION_COMMAND_SUFFIX"
      ;;
    *)
      POOL_CREATION_COMMAND_SUFFIX="raidz2 $POOL_CREATION_COMMAND_SUFFIX"
      ;;
  esac
  prepare_mounts_and_zfs_pool "$POOL_CREATION_COMMAND_SUFFIX"
else
  # now the disk is ready - mount partitions
  mount_part P3 "$INSTALL_DEV" /run/P3 2>/dev/null
fi


if mount_part CONFIG "$INSTALL_DEV" /config -t vfat -o iocharset=iso8859-1; then
   # uuidgen | sed -e 's#^.*-##'
   SOFT_SERIAL=$(tr ' ' '\012' < /proc/cmdline | sed -n '/eve_soft_serial=/s#eve_soft_serial=##p')
   SOFT_SERIAL=${SOFT_SERIAL:-$(uuidgen)}
   grep -q eve_blackbox /proc/cmdline || [ -f /config/soft_serial ] || echo "$SOFT_SERIAL" > /config/soft_serial
fi

REPORT=
# collect information about the node
if mount_part INVENTORY "$(root_dev)" /run/INVENTORY -t vfat -o iocharset=iso8859-1; then
   REPORT="/run/INVENTORY/$(cat /config/soft_serial 2>/dev/null)"
   mkdir -p "$REPORT"

   # first lets look at hardware model
   dmidecode > "$REPORT/hardwaremodel.txt"

   # try to generate model json file
   ctr_run /opt/debug spec.sh > "$REPORT/controller-model.json"
   ctr_run /opt/debug spec.sh -v > "$REPORT/controller-model-verbose.json"

   # Save to help figure out if RTC is not in UTC
   (hwclock -v -u; date -Is -u ) > "$REPORT/clock"
fi

# The creation of the 4 key pairs on the TPM below can take significant
# time. Make sure a hardware watchdog will not fire.
wdctl
watchdog -F /dev/watchdog &

TPM_DEVICE_PATH="/dev/tpmrm0"

# The device cert generation needs the current time. Some hardware
# doesn't have a battery-backed clock so we check the year makes some sense
# In that case we defer until first boot of EVE to run ntp and generate
# the device certificate
YEAR=$(date +%Y)
if [ "$YEAR" -gt 2020 ] && [ ! -f /config/device.cert.pem ]; then
   if [ -c $TPM_DEVICE_PATH ] && ! [ -f /config/disable-tpm ]; then
      echo "Generating TPM device certificate"
      if ! pillar_run tpmmgr createDeviceCert; then
         echo "Failed generating device certificate on TPM; fallback to soft"
         touch /config/disable-tpm
         sync
      else
         echo "Generated a TPM device certificate"
         if ! pillar_run tpmmgr createCerts; then
            echo "Failed to create additional certificates on TPM"
         fi
      fi
   else
      echo "No TPM; Generating soft device certificate"
   fi
   if [ ! -f /config/device.cert.pem ]; then
      if ! pillar_run tpmmgr createSoftDeviceCert; then
         echo "Failed to generate soft device certificate"
      elif ! pillar_run tpmmgr createSoftCerts; then
         echo "Failed to create additional certificates"
      fi
   fi
   sync
   sleep 5
fi
# Collect the device cert
if [ -f /config/device.cert.pem ] && [ -n "$REPORT" ]; then
   cat /config/device.cert.pem > "$REPORT/device.cert.pem"
fi

# finally check whether we are collecting a black box
if [ -n "$REPORT" ]; then
   # then we can collect our black box
   grep -q eve_blackbox /proc/cmdline && collect_black_box "$REPORT" 2>/dev/null
fi

# we also maybe asked to pause after
grep -q eve_pause_after_install /proc/cmdline && pause "shutting the node down"

# lets hope this is enough to flush the caches
sync; sleep 5; sync
umount /config 2>/dev/null
for p in INVENTORY P3; do
   umount "/run/$p" 2>/dev/null
done

if [ "$MULTIPLE_DISKS" = true ] && [ "$INSTALL_ZFS" = true ]; then
   adjust_zfs_mounts_and_umount
fi

# we need a copy of these in tmpfs so that a block device with rootfs can be yanked
cp /sbin/poweroff /sbin/reboot /bin/sleep /run
# we also maybe asked to reboot after install
if grep -q eve_reboot_after_install /proc/cmdline; then
  echo "NOTICE: Device will now reboot." >/dev/console
  /run/sleep 5

  /run/reboot -f
else
  echo "NOTICE: Device will now power off. Remove the USB stick and power it back on to complete the installation." >/dev/console
  /run/sleep 5

  /run/poweroff -f
fi
